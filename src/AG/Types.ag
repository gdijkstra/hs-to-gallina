{
type Alts = [Alt]
type BangTypes = [BangType]
type CNames = [CName]
type ClassDecls = [ClassDecl]
type Decls = [Decl]
type Derivings = [Deriving]
type ExpOpt = Maybe Exp
type ExpOpts = [ExpOpt]
type ExportSpecs = [ExportSpec]
type ExportSpecsOpt = Maybe ExportSpecs
type Exps = [Exp]
type FieldUpdates = [FieldUpdate]
type FunDeps = [FunDep]
type GadtDecls = [GadtDecl]
type GuardedAltList = [GuardedAlt]
type GuardedRhss = [GuardedRhs]
type IPBinds = [IPBind]
type ImportDecls = [ImportDecl]
type ImportSpecs = [ImportSpec]
type ImportSpecsBool = (Bool, ImportSpecs)
type ImportSpecsOpt = Maybe ImportSpecsBool -- TODO: curly braces would be better
type InstDecls = [InstDecl]
type KindOpt = Maybe Kind
type Matches = [Match]
type ModuleNameOpt = Maybe ModuleName
type ModulePragmas = [ModulePragma]
type Names = [Name]
type Ops = [Op]
type PXAttrs = [PXAttr]
type PatFields = [PatField]
type PatOpt = Maybe Pat
type Pats = [Pat]
type QualConDecls = [QualConDecl]
type QualStmts = [QualStmt]
type QualStmtss = [QualStmts]
type RPats = [RPat]
type RuleVars = [RuleVar]
type RuleVarsOpt = Maybe RuleVars
type Rules = [Rule]
type Stmts = [Stmt]
type StringOpt = Maybe String
type ToolOpt = Maybe Tool
type TyVarBinds = [TyVarBind]
type TyVarBindsOpt = Maybe TyVarBinds
type TypeOpt = Maybe Type
type Types = [Type]
type WarningTextOpt = Maybe WarningText
type XAttrs = [XAttr]
type GallinaDeclOpt = Maybe GallinaDecl
}
