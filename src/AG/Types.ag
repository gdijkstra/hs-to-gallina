-- Collection of type declarations.
sem Module                 
  | Module loc.types = M.fromList @decls.typeDecls

attr Decls Decl
  syn typeDecls :: {[(String, GallinaType)]}

sem Decls
  | Nil
     lhs.typeDecls = []
  | Cons
     lhs.typeDecls = @hd.typeDecls ++ @tl.typeDecls

sem Decl
  | TypeSig
     lhs.typeDecls = map (\n -> (n, (generalise @ty.gallinaType))) @names.names
  | TypeDecl TypeFamDecl DataDecl GDataDecl DataFamDecl TypeInsDecl 
    DataInsDecl GDataInsDecl ClassDecl InstDecl DerivDecl InfixDecl 
    DefaultDecl SpliceDecl FunBind PatBind ForImp ForExp RulePragmaDecl 
    DeprPragmaDecl WarnPragmaDecl InlineSig InlineConlikeSig SpecSig 
    SpecInlineSig InstSig AnnPragma 
     lhs.typeDecls = []

-- Conversion of Haskell types to Gallina types.
attr BangTypes QualConDecls QualConDecl ConDecl
  inh dataName :: GallinaType -- Needed for types of constructors

{
ppParams :: [String] -> String
ppParams [] = ""
ppParams xs@(_:_) = ' ' : unwords xs
}

sem Decl
  | DataDecl
     qualcondecls.dataName = foldl GallinaTyApp (GallinaTyCon @name.name)
                             . map GallinaTyVar $ @tyvarbinds.params

attr BangTypes BangType Type
  syn gallinaType :: GallinaType
                     
sem BangTypes
  | Nil
     lhs.gallinaType = @lhs.dataName
  | Cons
     lhs.gallinaType = GallinaTyFun @hd.gallinaType @tl.gallinaType
                  
sem BangType
  | UnBangedTy
     lhs.gallinaType = @ty.gallinaType
  | BangedTy UnpackedTy
     lhs.gallinaType = error "gallinaType: unsupported construct"

sem Type
  | TyFun
     lhs.gallinaType = GallinaTyFun @ty.gallinaType @ty1.gallinaType
  | TyApp
     lhs.gallinaType = GallinaTyApp @ty.gallinaType @ty1.gallinaType
  | TyVar
     lhs.gallinaType = GallinaTyVar @name.name
  | TyCon
     lhs.gallinaType = GallinaTyCon @qname.name
  | TyParen
     lhs.gallinaType = @ty.gallinaType
  | TyList
     lhs.gallinaType = GallinaTyList @ty.gallinaType
  | TyForall TyTuple TyInfix TyKind
     lhs.gallinaType = error "gallinaType: unsupported construct"

-- Missing rules for inherited attributes
sem Decl
  | DataInsDecl
     qualcondecls.dataName = error "Don't do this"

sem InstDecl
  | InsData
     qualcondecls.dataName = error "Don't do this"
                         
