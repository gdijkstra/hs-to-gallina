-- Conversion of definitions of terms, i.e. function definitions and
-- pattern bindings.

{
attachBindings :: GallinaTerm -> [GallinaLetDefinition] -> GallinaTerm
attachBindings t []       = t
attachBindings t bs@(_:_) = GallinaLet bs t
}

attr Matches Match
  syn arity :: Int

attr Matches
  syn gallinaMatches :: {[GallinaMatch]}

attr Match
  syn gallinaMatch :: GallinaMatch
                        
sem Matches
  | Nil  
     lhs.arity = error "Matches list should never be empty"
     lhs.gallinaMatches = []
  | Cons
     lhs.arity = @hd.arity
     lhs.gallinaMatches = @hd.gallinaMatch : @tl.gallinaMatches

sem Match                    
  | Match
     lhs.arity = @pats.arity
     lhs.gallinaMatch = GallinaMatch @pats.gallinaPats (attachBindings @rhs.term @binds.definitions)


-- Conversion of patterns.
attr Pats
  syn gallinaPats :: {[GallinaPat]}
  syn vars :: {[String]}
  syn arity :: Int


sem Pats
  | Nil  lhs.gallinaPats = []
         lhs.vars = []
         lhs.arity = 0
  | Cons lhs.gallinaPats = @hd.gallinaPat : @tl.gallinaPats
         lhs.vars = @hd.var : @tl.vars
         lhs.arity = 1 + @tl.arity

attr Pat
  syn gallinaPat :: GallinaPat
  syn var :: String

sem Pat
  | PVar            lhs.gallinaPat = GallinaPVar @name.name
                    lhs.var = @name.name
  | PLit            lhs.gallinaPat = GallinaPVar (prettyPrint @literal)
                    lhs.var = error "unsupported pattern in lambda"
  | PApp            lhs.gallinaPat = GallinaPApp @qname.name @pats.gallinaPats
                    lhs.var = error "unsupported pattern in lambda"
  | PWildCard       lhs.gallinaPat = GallinaPWildCard
                    lhs.var = error "unsupported pattern in lambda"
  | PNeg            lhs.gallinaPat = error "unsupported neg"
                    lhs.var = error "unsupported pattern in lambda"
  | PNPlusK         lhs.gallinaPat = error "unsupported nplusk"
                    lhs.var = error "unsupported pattern in lambda"
  | PInfixApp       lhs.gallinaPat = error "unsupported infix"
                    lhs.var = error "unsupported pattern in lambda"
  | PTuple          lhs.gallinaPat = error "unsupported tuple"
                    lhs.var = error "unsupported pattern in lambda"
  | PList           lhs.gallinaPat = error "unsupported list"
                    lhs.var = error "unsupported pattern in lambda"
  | PParen          lhs.gallinaPat = @pat.gallinaPat
                    lhs.var = @pat.var
  | PRec            lhs.gallinaPat = error "unsupported record"
                    lhs.var = error "unsupported pattern in lambda"
  | PAsPat          lhs.gallinaPat = error "unsupported aspat"
                    lhs.var = error "unsupported pattern in lambda"
  | PIrrPat         lhs.gallinaPat = error "unsupported irrpat"
                    lhs.var = error "unsupported pattern in lambda"
  | PatTypeSig      lhs.gallinaPat = error "unsupported typesig"
                    lhs.var = error "unsupported pattern in lambda"
  | PViewPat        lhs.gallinaPat = error "unsupported viewpat"
                    lhs.var = error "unsupported pattern in lambda"
  | PRPat           lhs.gallinaPat = error "unsupported rpat"
                    lhs.var = error "unsupported pattern in lambda"
  | PXTag           lhs.gallinaPat = error "unsupported xtag"
                    lhs.var = error "unsupported pattern in lambda"
  | PXETag          lhs.gallinaPat = error "unsupported xetag"
                    lhs.var = error "unsupported pattern in lambda"
  | PXPcdata        lhs.gallinaPat = error "unsupported cdata"
                    lhs.var = error "unsupported pattern in lambda"
  | PXPatTag        lhs.gallinaPat = error "unsupported xpattag"
                    lhs.var = error "unsupported pattern in lambda"
  | PXRPats         lhs.gallinaPat = error "unsupported xrpats"
                    lhs.var = error "unsupported pattern in lambda"
  | PExplTypeArg    lhs.gallinaPat = error "unsupported expltypearg"
                    lhs.var = error "unsupported pattern in lambda"
  | PQuasiQuote     lhs.gallinaPat = error "unsupported quasiquote"
                    lhs.var = error "unsupported pattern in lambda"
  | PBangPat        lhs.gallinaPat = error "unsupported bangpat"
                    lhs.var = error "unsupported pattern in lambda"

-- Conversion of expressions.
attr Rhs
  syn term :: GallinaTerm

sem Rhs
  | UnGuardedRhs lhs.term = @exp.term
  | GuardedRhss  lhs.term = error "unsupported guards"

attr Exp
  syn term :: GallinaTerm
              
sem Exp              
  | Var             lhs.term = GallinaVar @qname.name
  | Con             lhs.term = GallinaVar @qname.name
  | Lit             lhs.term = GallinaVar (prettyPrint @literal)
  | App             lhs.term = GallinaApp @exp.term @exp1.term
  | Lambda          lhs.term = GallinaLam @pats.vars @exp.term
  | Case            lhs.term = GallinaCase [@exp.term] @alts.matches
  | NegApp          lhs.term = error "Unsupported: negate app"
  | InfixApp        lhs.term = error "Unsupported: infix app"
  | IPVar           lhs.term = error "Unsupported: implicit var"
  | Let             lhs.term = attachBindings @exp.term @binds.definitions
  | If              lhs.term = error "Unsupported: if"
  | Do              lhs.term = error "Unsupported: do"
  | MDo             lhs.term = error "Unsupported: mdo"
  | Tuple           lhs.term = error "Unsupported: tuple"
  | TupleSection    lhs.term = error "Unsupported: tuple section"
  | List            lhs.term = error "Unsupported: list"
  | Paren           lhs.term = @exp.term
  | LeftSection     lhs.term = error "Unsupported: left section"
  | RightSection    lhs.term = error "Unsupported: right section"
  | RecConstr       lhs.term = error "Unsupported: record constructor"
  | RecUpdate       lhs.term = error "Unsupported: record update"
  | EnumFrom        lhs.term = error "Unsupported: enum from"
  | EnumFromTo      lhs.term = error "Unsupported: enum from to"
  | EnumFromThen    lhs.term = error "Unsupported: enum from then"
  | EnumFromThenTo  lhs.term = error "Unsupported: enum from then to"
  | ListComp        lhs.term = error "Unsupported: list comp"
  | ParComp         lhs.term = error "Unsupported"
  | ExpTypeSig      lhs.term = error "Unsupported"
  | VarQuote        lhs.term = error "Unsupported"
  | TypQuote        lhs.term = error "Unsupported"
  | BracketExp      lhs.term = error "Unsupported"
  | SpliceExp       lhs.term = error "Unsupported"
  | QuasiQuote      lhs.term = error "Unsupported"
  | XTag            lhs.term = error "Unsupported"
  | XETag           lhs.term = error "Unsupported"
  | XPcdata         lhs.term = error "Unsupported"
  | XExpTag         lhs.term = error "Unsupported"
  | XChildTag       lhs.term = error "Unsupported"
  | CorePragma      lhs.term = error "Unsupported"
  | SCCPragma       lhs.term = error "Unsupported"
  | GenPragma       lhs.term = error "Unsupported"
  | Proc            lhs.term = error "Unsupported"
  | LeftArrApp      lhs.term = error "Unsupported"
  | RightArrApp     lhs.term = error "Unsupported"
  | LeftArrHighApp  lhs.term = error "Unsupported"
  | RightArrHighApp lhs.term = error "Unsupported"

attr Alts
  syn matches :: {[GallinaMatch]}

attr Alt
  syn match :: GallinaMatch

sem Alts
  | Nil  lhs.matches = []
  | Cons lhs.matches = @hd.match : @tl.matches

sem Alt
  | Alt lhs.match = GallinaMatch [@pat.gallinaPat] (attachBindings @guardedalts.term @binds.definitions)
 
attr GuardedAlts
  syn term :: GallinaTerm

sem GuardedAlts              
  | UnGuardedAlt lhs.term = @exp.term
  | GuardedAlts  lhs.term = error "Guards not supported"
