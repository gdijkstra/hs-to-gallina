attr ModulePragmas ModulePragma
  syn bcFunctions :: {Set String}
  syn coDefs :: {Set String}

sem Module
  | Module
     loc.bcFunctions = @modulepragmas.bcFunctions
     loc.coDefs = @modulepragmas.coDefs

sem ModulePragmas
  | Nil
     lhs.bcFunctions = S.empty
     lhs.coDefs = S.empty
  | Cons
     lhs.bcFunctions = @tl.bcFunctions `S.union` @hd.bcFunctions
     lhs.coDefs = @tl.coDefs `S.union` @hd.coDefs

{
-- | Parse an options pragma starting with the first string argument. Examples:
-- @
-- checkParsePragma "bc:" "bc: foo bar fooBar" (Just (UnknownTool "HsToGallina"))
-- @
-- yields something like:
-- @
-- Set.fromList ["bar", "foo", "fooBar"]
-- @
-- If the input string does not start with the given pragma string,
-- then it will be ignored, i.e. the empty set will be returned.
checkParsePragma :: String -> String -> Maybe Tool -> Set String
checkParsePragma pragma inp (Just (UnknownTool "HsToGallina")) = case words inp of
  p : xs -> if p == pragma then S.fromList xs else S.empty
  _ -> S.empty
checkParsePragma _ _ _ = S.empty
}

sem ModulePragma
  | LanguagePragma AnnModulePragma
     lhs.bcFunctions = S.empty
     lhs.coDefs = S.empty
  | OptionsPragma
     lhs.bcFunctions = checkParsePragma "bc:" @string @toolopt
     lhs.coDefs = checkParsePragma "co:" @string @toolopt
