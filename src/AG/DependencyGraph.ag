sem Decl                     
  | DataDecl 
     loc.dependencasdf = @qualcondecls.dependencies
     loc.dependencies = trace (@declName ++ ": " ++ show @dependencasdf ++ "\n") $ @dependencasdf
  | FunBind
     loc.dependencasdf = @matches.dependencies
     loc.dependencies = trace (@declName ++ ": " ++ show @dependencasdf ++ "\n") $ @dependencasdf
  | PatBind
     loc.dependencasdf = @binds.dependencies
                         ++ (@binds.names `difference` @rhs.dependencies)
     loc.dependencies = trace (@declName ++ ": " ++ show @dependencasdf ++ "\n") $ @dependencasdf
  | TypeSig
     loc.dependencasdf = typeDeps @ty.gallinaType
     loc.dependencies = trace (show @names.names ++ ": " ++ show @dependencasdf ++ "\n") $ @dependencasdf


attr Match Matches Rhs Exp QualConDecl QualConDecls ConDecl BangType
  BangTypes Type Alt Alts GuardedAlts Binds Decls Decl
  syn dependencies :: {[String]}

sem Matches
  | Nil
     lhs.dependencies = []
  | Cons
     lhs.dependencies = @hd.dependencies ++ @tl.dependencies

sem Match                    
  | Match
     loc.dependencies = ((concatMap patVars @pats.gallinaPats) ++ @binds.names)
                        `difference`
                        (@rhs.dependencies ++ @binds.dependencies)

sem Rhs
  | UnGuardedRhs
     lhs.dependencies = @exp.dependencies
  | GuardedRhss
     lhs.dependencies = error "dependencies: Unsupported construct rhs"

sem Exp              
  | Var Con
     lhs.dependencies = [@qname.name]
  | Lit
     lhs.dependencies = [prettyPrint @literal]

  | App
     lhs.dependencies = @exp.dependencies ++ @exp1.dependencies
  | Lambda
     lhs.dependencies = @pats.vars `difference` @exp.dependencies
  | Case
     lhs.dependencies = @exp.dependencies ++ @alts.dependencies
  | Paren
     lhs.dependencies = @exp.dependencies
  | Let
     lhs.dependencies = @binds.dependencies
                        ++ (@binds.names `difference` @exp.dependencies)

  | NegApp InfixApp IPVar If Do MDo Tuple TupleSection List BracketExp
    LeftSection RightSection RecConstr RecUpdate EnumFrom EnumFromTo
    EnumFromThen EnumFromThenTo ListComp ParComp ExpTypeSig VarQuote
    TypQuote SpliceExp QuasiQuote XTag XETag XPcdata XExpTag
    XChildTag CorePragma SCCPragma GenPragma Proc LeftArrApp RightArrApp
    LeftArrHighApp RightArrHighApp
     lhs.dependencies = error "dependencies: Unsupported construct exp"

sem QualConDecls
  | Nil
     lhs.dependencies = []              
  | Cons
     lhs.dependencies = @hd.dependencies ++ @tl.dependencies
    
sem QualConDecl
  | QualConDecl
     lhs.dependencies = @condecl.dependencies
             
sem ConDecl             
  | ConDecl
     lhs.dependencies = @bangtypes.dependencies
  | InfixConDecl RecDecl
     lhs.dependencies = error "dependencies: Unsupported construct condecl"

sem BangTypes
  | Nil
     lhs.dependencies = []
  | Cons
     lhs.dependencies = @hd.dependencies ++ @tl.dependencies
                  
sem BangType
  | UnBangedTy
     lhs.dependencies = @ty.dependencies
  | BangedTy UnpackedTy
     lhs.dependencies = error "dependencies: Unsupported construct bangtype"

sem Type
  | TyFun
     lhs.dependencies = @ty.dependencies `difference` @ty1.dependencies
  | TyApp
     lhs.dependencies = @ty.dependencies ++ @ty1.dependencies
  | TyVar
     lhs.dependencies = []
  | TyCon
     lhs.dependencies = [@qname.name]
  | TyParen
     lhs.dependencies = @ty.dependencies
  | TyForall TyTuple TyList TyInfix TyKind
     lhs.dependencies = error "dependencies: Unsupported construct type"

sem Alts
  | Nil
     lhs.dependencies = []              
  | Cons
     lhs.dependencies = @hd.dependencies ++ @tl.dependencies

sem Alt
  | Alt
     lhs.dependencies = patVars @pat.gallinaPat `difference` @guardedalts.dependencies
 
sem GuardedAlts              
  | UnGuardedAlt 
     lhs.dependencies = @exp.dependencies           
  | GuardedAlts
     lhs.dependencies = error "dependencies: Unsupported construct guardedalts"

attr Binds Decls Decl
  syn names :: {[String]}

sem Binds
  | BDecls
     lhs.names = @decls.names
     lhs.dependencies = []
  | IPBinds
     lhs.names = error "implicit parameters unsupported"
     lhs.dependencies = []

sem Decls
  | Nil
     lhs.names = []
     lhs.dependencies = []
  | Cons
     lhs.names = @hd.names ++ @tl.names
     lhs.dependencies = @hd.names `difference` (@hd.dependencies ++ @tl.dependencies)

sem Decl                     
  | DataDecl 
     lhs.names = [@indName]
  | FunBind
     lhs.names = [@matches.name]
  | PatBind
     lhs.names = [@pat.var]
  | TypeSig
     lhs.names = @names.names
                
-- The following constructors aren't implemented.
 | TypeDecl TypeFamDecl GDataDecl DataFamDecl TypeInsDecl DataInsDecl 
   GDataInsDecl ClassDecl InstDecl DerivDecl InfixDecl DefaultDecl 
   SpliceDecl ForImp ForExp RulePragmaDecl DeprPragmaDecl 
   WarnPragmaDecl InlineSig InlineConlikeSig SpecSig SpecInlineSig 
   InstSig AnnPragma 
     lhs.names = error "Unsupported declarations"

sem Decl                     
  | DataDecl 
     lhs.dependencies = @dependencies
  | FunBind
     lhs.dependencies = @dependencies
  | PatBind
     lhs.dependencies = @dependencies
  | TypeSig
     lhs.dependencies = @dependencies

-- The following constructors aren't implemented.
 | TypeDecl TypeFamDecl GDataDecl DataFamDecl TypeInsDecl DataInsDecl 
   GDataInsDecl ClassDecl InstDecl DerivDecl InfixDecl DefaultDecl 
   SpliceDecl ForImp ForExp RulePragmaDecl DeprPragmaDecl 
   WarnPragmaDecl InlineSig InlineConlikeSig SpecSig SpecInlineSig 
   InstSig AnnPragma 
     lhs.dependencies = error "Unsupported declarations"                