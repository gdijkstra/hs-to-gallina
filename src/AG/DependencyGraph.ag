sem Decl                     
  | DataDecl 
     loc.dependencies = @qualcondecls.dependencies
  | TypeDecl
     loc.dependencies = @ty.dependencies
  | FunBind
     loc.dependencies = @matches.dependencies
  | PatBind
     loc.dependencies = @binds.dependencies
                        ++ (@binds.names `difference` @rhs.dependencies)
  | TypeSig
     loc.dependencies = typeDeps @ty.gallinaType


attr Match Matches Rhs Exp QualConDecl QualConDecls ConDecl BangType
  BangTypes Type Alt Alts GuardedAlts Binds Decls Decl Exps QOp QName
  Types
  syn dependencies :: {[String]}

sem Decls
  | Nil
     lhs.dependencies = []
  | Cons
     lhs.dependencies = @hd.names `difference` (@hd.dependencies ++ @tl.dependencies)

sem Alts BangTypes Exps QualConDecls Matches Types
  | Nil
     lhs.dependencies = []              
  | Cons
     lhs.dependencies = @hd.dependencies ++ @tl.dependencies

sem Match                    
  | Match
     loc.dependencies = ((concatMap patVars @pats.gallinaPats) ++ @binds.names)
                        `difference`
                        (@rhs.dependencies ++ @binds.dependencies)

sem Rhs
  | UnGuardedRhs
     lhs.dependencies = @exp.dependencies
  | GuardedRhss
     lhs.dependencies = error "dependencies: Unsupported construct rhs"

sem Exp              
  | Var Con
     lhs.dependencies = [@qname.name]
  | Lit
     lhs.dependencies = [prettyPrint @literal]

  | App
     lhs.dependencies = @exp.dependencies ++ @exp1.dependencies
  | Lambda
     lhs.dependencies = @pats.vars `difference` @exp.dependencies
  | Case
     lhs.dependencies = @exp.dependencies ++ @alts.dependencies
  | Paren
     lhs.dependencies = @exp.dependencies
  | Let
     lhs.dependencies = @binds.dependencies
                        ++ (@binds.names `difference` @exp.dependencies)

  | List
     lhs.dependencies = @exps.dependencies
  | InfixApp
     lhs.dependencies = concat [@exp.dependencies, @qop.dependencies, @exp1.dependencies]
  | If
     lhs.dependencies = concat [@exp.dependencies, @exp1.dependencies, @exp2.dependencies]
  | NegApp IPVar Do MDo TupleSection BracketExp Tuple
    LeftSection RightSection RecConstr RecUpdate EnumFrom EnumFromTo
    EnumFromThen EnumFromThenTo ListComp ParComp ExpTypeSig VarQuote
    TypQuote SpliceExp QuasiQuote XTag XETag XPcdata XExpTag
    XChildTag CorePragma SCCPragma GenPragma Proc LeftArrApp RightArrApp
    LeftArrHighApp RightArrHighApp
     lhs.dependencies = error "dependencies: Unsupported construct exp"

sem QOp
  | *
     lhs.dependencies = @qname.dependencies

sem QName
  | Qual
     lhs.dependencies = [@modulename.name ++ "." ++ @name.name]
  | UnQual
     lhs.dependencies = [@name.name]
  | Special
     lhs.dependencies = []

sem QualConDecl
  | QualConDecl
     lhs.dependencies = @condecl.dependencies
             
sem ConDecl             
  | ConDecl
     lhs.dependencies = @bangtypes.dependencies
  | InfixConDecl RecDecl
     lhs.dependencies = error "dependencies: Unsupported construct condecl"

sem BangType
  | UnBangedTy
     lhs.dependencies = @ty.dependencies
  | BangedTy UnpackedTy
     lhs.dependencies = error "dependencies: Unsupported construct bangtype"

sem Type
  | TyFun
     lhs.dependencies = @ty.dependencies `difference` @ty1.dependencies
  | TyApp
     lhs.dependencies = @ty.dependencies ++ @ty1.dependencies
  | TyVar
     lhs.dependencies = []
  | TyCon
     lhs.dependencies = [@qname.name]
  | TyParen
     lhs.dependencies = @ty.dependencies
  | TyList
     lhs.dependencies = @ty.dependencies
  | TyForall TyInfix TyKind TyTuple
     lhs.dependencies = error "dependencies: Unsupported construct type"

sem Alt
  | Alt
     lhs.dependencies = patVars @pat.gallinaPat `difference` @guardedalts.dependencies
 
sem GuardedAlts              
  | UnGuardedAlt 
     lhs.dependencies = @exp.dependencies           
  | GuardedAlts
     lhs.dependencies = error "dependencies: Unsupported construct guardedalts"

sem Binds
  | BDecls
     lhs.dependencies = @decls.dependencies
  | IPBinds
     lhs.dependencies = error "implicit parameters unsupported"

attr Binds Decls Decl
  syn names :: {[String]}


sem Binds
  | BDecls
     lhs.names = @decls.names
  | IPBinds
     lhs.names = error "implicit parameters unsupported"

sem Decls
  | Nil
     lhs.names = []
  | Cons
     lhs.names = @hd.names ++ @tl.names

sem Decl                     
  | DataDecl FunBind PatBind TypeDecl
     lhs.names = [@declName]
  | TypeSig
     lhs.names = @names.names
                
-- The following constructors aren't implemented.
 | TypeFamDecl GDataDecl DataFamDecl TypeInsDecl DataInsDecl 
   GDataInsDecl ClassDecl InstDecl DerivDecl InfixDecl DefaultDecl 
   SpliceDecl ForImp ForExp RulePragmaDecl DeprPragmaDecl 
   WarnPragmaDecl InlineSig InlineConlikeSig SpecSig SpecInlineSig 
   InstSig AnnPragma 
     lhs.names = error "Unsupported declarations"

sem Decl                     
  | DataDecl FunBind PatBind TypeSig TypeDecl
     lhs.dependencies = @dependencies

-- The following constructors aren't implemented.
 | TypeFamDecl GDataDecl DataFamDecl TypeInsDecl DataInsDecl 
   GDataInsDecl ClassDecl InstDecl DerivDecl InfixDecl DefaultDecl 
   SpliceDecl ForImp ForExp RulePragmaDecl DeprPragmaDecl 
   WarnPragmaDecl InlineSig InlineConlikeSig SpecSig SpecInlineSig 
   InstSig AnnPragma 
     lhs.dependencies = error "Unsupported declarations"                