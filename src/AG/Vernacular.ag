-- Order and group all the definitions and make a Vernacular document
-- out of it.

{
data GallinaUngroupedDefinition =
  GallinaUngroupedInd GallinaInductiveBody
  | GallinaUngroupedFunOrPat FunOrPatBody
  deriving (Show, Eq)

type DeclDeps =  [(GallinaUngroupedDefinition, String, [String])]

-- | Group the definitions using the strongly connected components of
-- the dependency graph. It will raise an error if we have a data type
-- that is mutually recursive with something that's not a data
-- type. It will also raise an error when we have a 'CyclicSCC' with
-- an empty list, which should never happen.
groupDefinitions :: SCC GallinaUngroupedDefinition -> VernacularCommand
groupDefinitions (AcyclicSCC x) = toDef x
  where
    toDef (GallinaUngroupedInd b              ) = GallinaInductive [b] False
    toDef (GallinaUngroupedFunOrPat (Left b)  ) = GallinaFunction b 
    toDef (GallinaUngroupedFunOrPat (Right b) ) = GallinaPatBinding b
groupDefinitions (CyclicSCC is@((GallinaUngroupedInd _):_)) = GallinaInductive (map toInd is) False
  where
    toInd (GallinaUngroupedInd b) = b
    toInd _ = error "groupDefinitions: toInd: argument must be an inductive definition."
groupDefinitions (CyclicSCC is@((GallinaUngroupedFunOrPat _):_)) = GallinaFixpoint (map toFix is) False
  where
    toFix (GallinaUngroupedFunOrPat b) = b
    toFix _ = error "groupDefinitions: toFix: argument must be a function or pattern binding."
groupDefinitions (CyclicSCC []) = error "groupDefinitions: CyclicSCC should have non-empty list argument."

-- | Fetch the definition name of an ungrouped definition.
declName :: GallinaUngroupedDefinition -> String
declName (GallinaUngroupedInd b              ) = inductiveName b
declName (GallinaUngroupedFunOrPat (Left b)  ) = funName b
declName (GallinaUngroupedFunOrPat (Right b) ) = patName b

-- | Extract the dependencies from a type.
typeDeps :: GallinaType -> [String]
typeDeps (GallinaTyListTerm ts   ) = concatMap typeDeps ts
typeDeps (GallinaTyTuple ts      ) = concatMap typeDeps ts
typeDeps (GallinaTyEq _ _        ) = error "typeDeps: eq types should not occur here"
typeDeps (GallinaTyPi _ _        ) = error "typeDeps: pi types should not occur here"
typeDeps (GallinaTyForall vars t ) = vars `difference` typeDeps t
typeDeps (GallinaTyFun l r       ) = typeDeps l ++ typeDeps r
typeDeps (GallinaTyApp l r       ) = typeDeps l ++ typeDeps r
typeDeps (GallinaTyList t        ) = typeDeps t
typeDeps (GallinaTyVar _         ) = []
typeDeps (GallinaTyCon v         ) = [v]
typeDeps (GallinaTySet           ) = []
typeDeps (GallinaTyProp          ) = []

-- | Associate all the ungrouped definitions with their types and add
-- the dependencies induced by that type. Raises an error if it cannot
-- find a type, which will happen if we do not have explicit type
-- signatures for every top-level definition.
associateTypes :: Map String GallinaType -> DeclDeps -> DeclDeps 
associateTypes types declDeps = map f declDeps
  where
    f (def@(GallinaUngroupedInd _), name, deps) = (def, name, deps)
    f ((GallinaUngroupedFunOrPat b), name, deps) = ( associateType name b
                                                   , name
                                                   , deps ++ typeDeps (ty name)
                                                   )

    associateType :: String -> FunOrPatBody -> GallinaUngroupedDefinition
    associateType n (Left b ) = GallinaUngroupedFunOrPat
                                $ Left
                                $ b { funType = Just $ ty n }
    associateType n (Right b) = GallinaUngroupedFunOrPat
                                $ Right
                                $ b { patType = Just $ ty n }

    ty n = case M.lookup n types of
      Nothing -> error $ "ty: could not find type of " ++ show n
      (Just t) -> t

-- | Associate the dependencies on constructor names with the
-- corresponding data type.
associateConstrs :: Map String String -> DeclDeps -> DeclDeps
associateConstrs constrMap declDeps = map (third (associate constrMap)) declDeps

associate :: Map String String -> [String] -> [String]
associate constrMap names = map (\x -> M.findWithDefault x x constrMap) names

-- | Associate the types with the ungrouped definitions, associate the
-- constructors with the name of their types and group/sort the
-- definitions according to the dependency graph.
mkVernacular :: Map String GallinaType -> Map String String -> String -> DeclDeps -> VernacularDocument
mkVernacular types constrMap name ungroupedDefs =
  let typedDefs = associateTypes types . associateConstrs constrMap $ ungroupedDefs
      sccs = stronglyConnComp typedDefs
      groupedDefs = map groupDefinitions sccs
  in VernacularDocument { documentName     = name
                        , documentCommands = groupedDefs
                        }
}

attr Module
  syn result :: Result
                 
sem Module                 
  | Module
     lhs.result = Result
                  { resVernacular = mkVernacular @types @constrMap @modulename.name @decls.declsDeps
                  , bcDefinitions = @bcFunctions
                  , coDefinitions = @coDefs
                  }
     loc.constrMap = M.fromList @decls.constrAssocs
     loc.dependencies = @decls.names `difference` (associate @constrMap @decls.dependencies)

-- Associate constructor names with the data type they belong to.
attr Decl Decls
  syn constrAssocs :: {[(String, String)]}

sem Decls
  | Nil
     lhs.constrAssocs = []
  | Cons
     lhs.constrAssocs = @hd.constrAssocs ++ @tl.constrAssocs

sem Decl
  | DataDecl
     lhs.constrAssocs = map (\x -> (constrName x, @declName)) @constrs
  | TypeDecl TypeFamDecl GDataDecl DataFamDecl TypeInsDecl DataInsDecl 
    GDataInsDecl ClassDecl InstDecl DerivDecl InfixDecl DefaultDecl 
    SpliceDecl TypeSig ForImp ForExp RulePragmaDecl DeprPragmaDecl 
    WarnPragmaDecl InlineSig InlineConlikeSig SpecSig SpecInlineSig 
    InstSig AnnPragma FunBind PatBind
     lhs.constrAssocs = []

{
-- | Group the definitions in lets/wheres. We will raise an error if
-- we encounter a data type definition (which should be impossible) or
-- when we have mutually recursive definitions.
groupLetDefinitions :: DeclDeps -> [GallinaLetDefinition]
groupLetDefinitions = map groupLetDefinition . stronglyConnComp
  where
    groupLetDefinition :: SCC GallinaUngroupedDefinition -> GallinaLetDefinition
    groupLetDefinition (AcyclicSCC x) = toDef x
      where
        toDef (GallinaUngroupedInd _              ) = error "groupLetDefinition: data types not allowed"
        toDef (GallinaUngroupedFunOrPat (Left b)  ) = GallinaLetFunction b
        toDef (GallinaUngroupedFunOrPat (Right b) ) = GallinaLetPatBinding b
    groupLetDefinition (CyclicSCC ((GallinaUngroupedInd _):_)) = error "groupLetDefinition: data types not allowed"
    groupLetDefinition (CyclicSCC [GallinaUngroupedFunOrPat b]) = GallinaLetFixpoint b
    groupLetDefinition (CyclicSCC _) = error "groupLetDefinition: CyclicSCC should have list argument of length 1."

}

attr Binds
  syn definitions :: {[GallinaLetDefinition]}

sem Binds
  | BDecls
     lhs.definitions = groupLetDefinitions @decls.declsDeps
  | IPBinds
     lhs.definitions = error "Implicit parameters unsupported"