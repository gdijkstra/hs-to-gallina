imports
{
import           Data.Graph
import           Data.List
import           Gallina.Syntax
import           Language.Haskell.Exts.Pretty
import           Language.Haskell.Exts.Syntax
import           Data.Map (Map)
import qualified Data.Map as M
import           Data.Set (Set)
import qualified Data.Set as S
}

module {AG} {} {}

include "AG/TypeSynonyms.ag"
include "AG/Syntax.ag"
include "AG/Vernacular.ag"
include "AG/Declarations.ag"
include "AG/DataTypes.ag"
include "AG/Terms.ag"
include "AG/Types.ag"
include "AG/DependencyGraph.ag"
include "AG/Util.ag"
include "AG/Pragmas.ag"

{
-- | Data type storing the result of convert the Haskell AST to a Coq
-- AST.
data Result = 
  Result
  { resVernacular :: VernacularDocument -- ^ Contains the module name and AST of its body.
  , bcDefinitions :: Set String         -- ^ All the definitions on which we should apply the Bove-Capretta method.
  , coDefinitions :: Set String         -- ^ All the definitions that should be read coinductively.
  }

-- | Convert the Haskell AST to a Coq AST and store some extra
-- information we got from the Haskell pragmas. Note that after this
-- step we didn't do any ordering of definitions and other
-- transformations. The result will therefore most likely not be valid
-- Gallina code.
convertToGallina :: Module -> Result
convertToGallina m = result_Syn_Module $ wrap_Module (sem_Module m) $ Inh_Module
}
